import org.apache.tools.ant.taskdefs.condition.Os;
apply plugin: 'com.github.dcendents.android-maven'

Properties projectProperties = new Properties()
projectProperties.load(rootProject.file('gradle.properties').newDataInputStream())

group = projectProperties.getProperty("bintray.groupId")

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                groupId projectProperties.getProperty("bintray.groupId")
                artifactId projectProperties.getProperty("bintray.artifact")

                name projectProperties.getProperty("bintray.libraryName")
                description projectProperties.getProperty("bintray.libraryDescription")
                url projectProperties.getProperty("bintray.siteUrl")

                licenses {
                    license {
                        name projectProperties.getProperty("bintray.licenseName")
                        url projectProperties.getProperty("bintray.licenseUrl")
                    }
                }
                developers {
                    developer {
                        id projectProperties.getProperty("bintray.developerId")
                        name projectProperties.getProperty("bintray.developerName")
                        email projectProperties.getProperty("bintray.developerEmail")
                    }
                }
                scm {
                    connection projectProperties.getProperty("bintray.gitUrl")
                    developerConnection projectProperties.getProperty("bintray.gitUrl")
                    url projectProperties.getProperty("bintray.siteUrl")
                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

version = projectProperties.getProperty("bintray.libraryVersion")

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

artifacts {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        archives javadocJar
    }
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = projectProperties.getProperty("bintray.artifact")
        desc = projectProperties.getProperty("bintray.libraryDescription")
        websiteUrl = projectProperties.getProperty("bintray.siteUrl")
        vcsUrl = projectProperties.getProperty("bintray.gitUrl")
        licenses = projectProperties.getProperty("bintray.allLicenses").split(',')
        publish = true
        publicDownloadNumbers = false
        version {
            desc = projectProperties.getProperty("bintray.libraryDescription")
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                //Optional. The passphrase for GPG signing'
                //passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}
